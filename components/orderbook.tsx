/**
 
 * This code was generated by v0 by Vercel.
* @see https://v0.dev/t/MdUBIaikeem
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
"use client";
import React, { useState, useEffect, useRef } from "react";
import { ExchangeConnection } from "@zetamarkets/zetax-sdk";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";

interface OrderbookLevel {
  price: number;
  size: number;
}

interface OrderbookProps {
  onPriceSelect: (price: string) => void;
}

const Orderbook: React.FC<OrderbookProps> = ({ onPriceSelect }) => {
  const [orderbook, setOrderbook] = useState<{
    bids: OrderbookLevel[];
    asks: OrderbookLevel[];
  }>({ bids: [], asks: [] });
  const [currentPrice, setCurrentPrice] = useState<number | null>(null);
  const [previousPrice, setPreviousPrice] = useState<number | null>(null);
  const [grouping, setGrouping] = useState<number>(0.001);
  const [flashingLevels, setFlashingLevels] = useState<Set<number>>(new Set());
  const prevOrderbookRef = useRef<typeof orderbook | null>(null);
  const orderbookRef = useRef<HTMLDivElement>(null);
  const hasScrolled = useRef(false);

  useEffect(() => {
    const fetchOrderbook = async () => {
      try {
        const exchange = new ExchangeConnection(
          "http://127.0.0.1",
          9080,
          12346
        );
        const orderbookData = await exchange.getOrderbook(1, 100);
        if (orderbookData) {
          const newFlashingLevels = new Set<number>();
          if (prevOrderbookRef.current) {
            const prevLevels = new Map([
              ...prevOrderbookRef.current.bids.map((b) => [b.price, b.size]),
              ...prevOrderbookRef.current.asks.map((a) => [a.price, a.size]),
            ]);
            const currentLevels = new Map([
              ...orderbookData.bids.map((b) => [b.price, b.size]),
              ...orderbookData.asks.map((a) => [a.price, a.size]),
            ]);

            for (const [price, size] of currentLevels) {
              if (!prevLevels.has(price) || prevLevels.get(price) !== size) {
                newFlashingLevels.add(price);
              }
            }
            for (const [price] of prevLevels) {
              if (!currentLevels.has(price)) {
                newFlashingLevels.add(price);
              }
            }
          }

          setOrderbook(orderbookData);
          setFlashingLevels(newFlashingLevels);
          prevOrderbookRef.current = orderbookData;

          if (orderbookData.bids.length > 0 && orderbookData.asks.length > 0) {
            const bestBid = orderbookData.bids[0].price;
            const bestAsk = orderbookData.asks[0].price;
            setPreviousPrice(currentPrice);
            setCurrentPrice((bestBid + bestAsk) / 2); // This is now the midpoint

            // Center the orderbook only on initial load
            if (!hasScrolled.current && orderbookRef.current) {
              const midpoint = orderbookRef.current.scrollHeight / 2;
              orderbookRef.current.scrollTop =
                midpoint - orderbookRef.current.clientHeight / 2;
            }
          }
        }
      } catch (error) {
        console.error("Error fetching orderbook:", error);
      }
    };

    fetchOrderbook();
    const interval = setInterval(fetchOrderbook, 1000);

    return () => clearInterval(interval);
  }, []);

  // Add scroll event listener to detect user scrolling
  useEffect(() => {
    const handleScroll = () => {
      hasScrolled.current = true;
    };

    const orderbookElement = orderbookRef.current;
    if (orderbookElement) {
      orderbookElement.addEventListener("scroll", handleScroll);
    }

    return () => {
      if (orderbookElement) {
        orderbookElement.removeEventListener("scroll", handleScroll);
      }
    };
  }, []);

  const aggregateOrderbook = (
    levels: OrderbookLevel[],
    groupSize: number
  ): OrderbookLevel[] => {
    const groupedLevels: { [key: number]: OrderbookLevel } = {};

    levels.forEach((level) => {
      const groupPrice = Math.floor(level.price / groupSize) * groupSize;
      if (!groupedLevels[groupPrice]) {
        groupedLevels[groupPrice] = { price: groupPrice, size: 0 };
      }
      groupedLevels[groupPrice].size += level.size;
    });

    return Object.values(groupedLevels).sort((a, b) => b.price - a.price);
  };

  const groupedAsks = aggregateOrderbook(orderbook.asks, grouping);
  const groupedBids = aggregateOrderbook(orderbook.bids, grouping);

  const handlePriceClick = (price: number) => {
    onPriceSelect(price.toFixed(3));
  };

  return (
    <div className="flex flex-col w-full h-full bg-black text-gray-300 border-l border-gray-800">
      <div className="flex justify-between items-center border-b border-gray-800 p-2">
        <div className="flex space-x-4">
          <span className="font-bold">Order Book</span>
        </div>
        <Select onValueChange={(value) => setGrouping(parseFloat(value))}>
          <SelectTrigger className="w-20 bg-gray-900 text-gray-400 border-none">
            <SelectValue placeholder={grouping.toString()} />
          </SelectTrigger>
          <SelectContent className="bg-gray-900 text-gray-300 border border-gray-700">
            <SelectItem value="0.001">0.001</SelectItem>
            <SelectItem value="0.01">0.01</SelectItem>
            <SelectItem value="0.1">0.1</SelectItem>
            <SelectItem value="1">1</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div className="flex-1 overflow-y-auto" ref={orderbookRef}>
        <div className="grid grid-cols-3 gap-2 text-gray-500 text-xs p-2 sticky top-0 bg-black">
          <span>Price(USD)</span>
          <span className="text-right">Qty(SOL)</span>
          <span className="text-right">Total(USD)</span>
        </div>
        <div className="space-y-1 px-2">
          {groupedAsks.map((ask, index) => (
            <div
              key={`ask-${index}`}
              className={`grid grid-cols-3 gap-2 text-xs cursor-pointer hover:bg-gray-800 ${
                flashingLevels.has(ask.price) ? "flash-update" : ""
              }`}
              onClick={() => handlePriceClick(ask.price)}
            >
              <span className="text-red-500">{ask.price.toFixed(3)}</span>
              <span className="text-right">{ask.size.toFixed(3)}</span>
              <span className="text-right">
                {(ask.price * ask.size).toFixed(3)}
              </span>
            </div>
          ))}
        </div>
        <div
          className="flex items-center justify-between text-sm font-bold my-2 px-2 sticky bg-black py-2"
          style={{ top: "1.5rem" }}
        >
          {currentPrice && (
            <span className="text-yellow-500">
              <FlagIcon className="w-4 h-4 inline-block mr-1" />
              {currentPrice.toFixed(3)}
            </span>
          )}
        </div>
        <div className="space-y-1 px-2">
          {groupedBids.map((bid, index) => (
            <div
              key={`bid-${index}`}
              className={`grid grid-cols-3 gap-2 text-xs cursor-pointer hover:bg-gray-800 ${
                flashingLevels.has(bid.price) ? "flash-update" : ""
              }`}
              onClick={() => handlePriceClick(bid.price)}
            >
              <span className="text-green-500">{bid.price.toFixed(3)}</span>
              <span className="text-right">{bid.size.toFixed(3)}</span>
              <span className="text-right">
                {(bid.price * bid.size).toFixed(3)}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

function ArrowDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 5v14" />
      <path d="m19 12-7 7-7-7" />
    </svg>
  );
}

function FlagIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z" />
      <line x1="4" x2="4" y1="22" y2="15" />
    </svg>
  );
}

export default Orderbook;
